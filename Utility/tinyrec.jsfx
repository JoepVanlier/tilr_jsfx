desc:TinyRec
author: tilr
version: 1.0.3
provides:
  tinyrec/tr.gfxlib.jsfx-inc
  tinyrec/img/loop_active.png
  tinyrec/img/loop.png
  tinyrec/img/pause.png
  tinyrec/img/play.png
  tinyrec/img/rec_active.png
  tinyrec/img/rec.png
  tinyrec/img/save.png
  tinyrec/img/stop.png
  tinyrec/img/tools.png
about:
  # TinyRec

  Audio recording utility, stores up to 4 minutes at 44100 sample rate.

// maxmem = 120seconds * 44100srate * 2chn + 1000prebuf _ dsbuf + 8
options: maxmem=21173104

import tr.gfxlib.jsfx-inc
filename:0,tinyrec/img/loop.png
filename:1,tinyrec/img/loop_active.png
filename:2,tinyrec/img/play.png
filename:3,tinyrec/img/pause.png
filename:4,tinyrec/img/stop.png
filename:5,tinyrec/img/rec.png
filename:6,tinyrec/img/rec_active.png
filename:7,tinyrec/img/tools.png
filename:8,tinyrec/img/save.png

@init

ext_noinit = 1;

// buffer for pre-recording
prebuf = 0;
prepos = 0;
premax = 1000;

// buffer for downsampled waveform
dsbuf = prebuf + premax + 4;
dsmax = 4096 + 1;

// recording buffer
recbuf = dsbuf + dsmax + 4;
recpos = 0;
recmax = min(44100 * 240, __memtop() / 2 - 4096 - 1008);
recsize = 0;
append = 1;
playpos = 0;
play_loop = 0;

is_recording = 0;
is_playing = 0;
is_armed = 0;
got_input = 0;
no_input = 0; // counter for no input samples
noise_gate = 0.001;

zoom = 1;
scrollx = 0;
sel_start = 0;
sel_end = 0;

function gain2dB (gain) (
  20 * log10(gain);
);

function record () (
  !append ? (
    recpos = 0;
    recsize = 0;
  );
  is_recording = 1;
  is_playing = 0;
  is_paused = 0;
  got_input = 0;
  zoom = 1;
);

function play ()
local(playstart)
(
  is_recording = 0;
  is_playing = 1;
  is_paused = 0;
  !playpos && sel_start != sel_end ? (
    playpos = min(sel_start, sel_end)|0;
    playpos % 2 ? playpos -= 1;
  );
);

function pause () (
  is_playing = 0;
  is_paused = 1;
);

function stop () (
  is_recording = 0;
  is_playing = 0;
  got_input = 0;
  no_input = 0;
  playpos = 0;
  is_paused = 0;
);

function clear () (
  stop();
  recpos = 0;
  recsize = 0;
  sel_end = 0;
  sel_start = 0;
  zoom = 0;
  scrollx = 0;
);

function trim ()
local(start, end)
(
  start = min(sel_start, sel_end)|0;
  end = max(sel_start, sel_end)|0;
  start % 2 ? start -= 1;
  end % 2 ? end -= 1;
  memcpy(recbuf, recbuf + start*2, (end-start) * 2);
  recsize = end - start;
  recpos ? recpos = recsize;
  sel_end = 0;
  sel_start = 0;
);

function delete ()
local(start, end)
(
  start = min(sel_start, sel_end)|0;
  end = max(sel_start, sel_end)|0;
  start % 2 ? start -= 1;
  end % 2 ? end -= 1;
  memcpy(
    recbuf + start * 2,
    recbuf + end * 2,
    (recsize - end) * 2
  );
  recsize = recsize - (end - start);
  recpos ? recpos = recsize;
  sel_end = 0;
  sel_start = 0;
);

function insert_pre_buffer()
(
  prepos -= premax / 2;
  prepos < 0 ? prepos = premax / 2 + prepos;
  loop(premax/2,
    recbuf[recpos*2] = prebuf[prepos*2];
    recbuf[recpos*2+1] = prebuf[prepos*2+1];
    recpos += 1;
    prepos += 1;
    prepos >= premax / 2 ? (
      prepos = 0;
    );
  );
);

@sample

recpos > recmax ? (
  is_recording = 0;
);

is_armed == 1 || is_armed == 2 ? (
  prebuf[prepos*2] = spl0;
  prebuf[prepos*2+1] = spl1;
  prepos += 1;
  prepos >= premax / 2 ? (
    prepos = 0;
  );
);

(is_armed == 1 || is_armed == 2) && is_recording &&
(abs(spl0) > noise_gate || abs(spl1) > noise_gate) ?
(
  !got_input ? (
    insert_pre_buffer();
  );
  got_input = 1;
  no_input = 0;
);

is_armed == 2 && is_recording && got_input &&
abs(spl0) <= noise_gate && abs(spl1) <= noise_gate ?
(
  no_input += 1;
  no_input > srate ? (
    got_input = 0;
  );
);

(is_recording && is_armed == 0) ||
(is_recording && is_armed == 3 && play_state == 1) ||
(is_recording && (is_armed == 1 || is_armed == 2) && got_input) ?
(
  recbuf[recpos*2] = spl0;
  recbuf[recpos*2+1] = spl1;
  recpos += 1;
  recpos > recsize ? (
    recsize = recpos;
  );
);

is_playing ? (
  spl0 += recbuf[playpos*2];
  spl1 += recbuf[playpos*2+1];
  playpos += 1;
  sel_start != sel_end ? (
    playpos > max(sel_start, sel_end) ? (
      playpos = min(sel_start, sel_end)|0;
      playpos % 2 ? playpos -= 1;
      !play_loop ? stop();
    );
  ) : (
    playpos > recsize ? (
      playpos = 0;
      !play_loop ? stop();
    );
  );
);

@gfx 450 300

COLOR_ACTIVE = 0x00ccff;
winx = 10;
winy = 75;
winw = gfx_w - 20;
winh = min(gfx_h - winy - 10, 4096);
gfx_clear = COLOR_BG;
mouse.update_mouse_state();
gfx_setfont(1, "Arial", 16, 'b');
gfx_measurestr("0123456789", font_scaling, fonth);
font_scaling = 70 / font_scaling; // 70 is windows width for 0123456789
gfx_setfont(1, "Arial", floor(16 * font_scaling), 'b');

drawx = 10;
drawy = 10;
set_color(play_loop ? 0x00FFFF : 0xFFFFFF);
gfx_x = drawx;
gfx_y = drawy;
gfx_blit(play_loop ? 1 : 0, 1, 0);

mouse.left_click && mouse_in_rect(drawx, drawy, 35, 35) ? (
  play_loop = !play_loop;
);
set_color(0xFFFFFF);

drawx += 44;
// draw playbutton
gfx_x = drawx;
gfx_blit(is_playing ? 3 : 2, 1, 0);
mouse.left_click && mouse_in_rect(drawx,drawy,35,35) ? (
  is_playing ? (
    pause();
  ) : (
    play();
  );
);

drawx += 44;
gfx_x = drawx;
// draw stop button
gfx_blit(4,1,0);
set_color(0xFFFFFF);
mouse.left_click && mouse_in_rect(drawx, drawy, 35, 35) ? (
  stop();
);

// draw rec button
drawx += 43;
gfx_x = drawx;
gfx_blit(is_recording ? 6 : 5, 1, 0);
mouse.left_click && mouse_in_rect(drawx, drawy, 35, 35) ? (
  is_recording ? (
    stop();
  ) : (
    record();
  );
);

// draw rec options
drawx += 44;
label = is_armed == 1 ? "On Input" : is_armed == 2 ? "Input" : is_armed == 3 ? "On Play" : "Now";
draw_button(drawx, drawy+10, 60, label, 0);
mouse.left_click && mouse_in_rect(drawx, drawy+10, 60, 17) ? (
  gfx_x = drawx; gfx_y = drawy + 10 + 17;
  menu = #;
  strcpy(menu, is_armed == 0 ? "!Now|" : "Now|");
  strcat(menu, is_armed == 1 ? "!On Input|" : "On Input|");
  strcat(menu, is_armed == 2 ? "!Input|" : "Input|");
  strcat(menu, is_armed == 3 ? "!On Play" : "Play");
  choice = gfx_showmenu(menu);
  choice ? is_armed = choice - 1;
);

drawx += 70;
is_armed == 1 || is_armed == 2 ? (
  gfx_x = drawx;
  gfx_y = drawy + 12;
  gfx_setfont(1, "Arial", floor(12*font_scaling));
  set_color(0xcccccc);
  gfx_drawstr("Noise:");
  gfx_setfont(1, "Arial", floor(16*font_scaling), 'b');
  drawx += 35;
  draw_button(drawx, drawy+10, 60, sprintf(#, "%i dB", gain2dB(noise_gate)), 0);
  mouse.left_click && mouse_in_rect(drawx, drawy+10, 60, 17) ? (
    noise_gate_drag = 1;
  );
);

function time_minutes (pos) (
  pos / srate / 60;
);

function time_seconds (pos) (
  (pos / srate) - (time_minutes(pos)|0) * 60;
);

function time_millis (pos) (
  (pos / srate - (time_seconds(pos)|0) - (time_minutes(pos)|0) * 60) * 1000;
);

function screen_to_buf (x) (
  x * recsize / zoom + scrollx * recsize / zoom * (zoom - 1);
);

function buf_to_screen (x) (
  x / recsize * zoom - scrollx * (zoom-1);
);

drawx = 10;
drawy = 58;
draw_button(drawx,drawy,60, "Append", append);
mouse.left_click && mouse_in_rect(drawx,drawy,60,18) ? (
  append = !append;
);
drawx += 70;
gfx_x = drawx;

!is_recording && recsize && mouse_in_rect(winx,winy,winw,winh) ? (
  set_color(0xcccccc);
  pos = screen_to_buf((mouse.x - winx) / winw);
  gfx_drawstr(sprintf(#, "%02d:%02d:%03d", time_minutes(pos),time_seconds(pos), time_millis(pos)));
) : is_armed == 3 && is_recording && play_state != 1 ? (
  set_color(0xFF5555);
  gfx_drawstr("Waiting for play");
) : is_armed && is_recording && !got_input ? (
  set_color(0xFF5555);
  gfx_drawstr("Waiting for input..");
) : is_recording ? (
  set_color(0xFF5555);
  gfx_drawstr("RECORDING");
);

// RIGHT BUTTONS

function export_wave()
local(start, end)
(
  track = get_host_placement();
  track < 0 ? track = 0;
  sel_start != sel_end ? (
    start = (min(sel_start,sel_end)|0);
    end = (max(sel_start,sel_end)|0) - start;
    export_buffer_to_project(recbuf + start * 2, end, 2, srate, track);
  ) : (
    export_buffer_to_project(recbuf, recsize, 2, srate, track);
  );
);

drawx = gfx_w - 35;
drawy = 15;
gfx_x = drawx; gfx_y = drawy;
gfx_blit(8,1,0);
mouse.left_click && mouse_in_rect(drawx, drawy, 25, 25) ? (
  export_wave();
);

drawx -= 35;
gfx_x = drawx;
gfx_blit(7, 1,0);
(mouse.left_click && mouse_in_rect(drawx,drawy, 25,25)) ||
(mouse.right_click && mouse_in_rect(winx,winy,winw,winh)) ?
(
  gfx_x = mouse.x; gfx_y = mouse.y;
  menu = #;
  candel = sel_end != sel_start && !is_recording;
  strcpy(menu, "Clear||");
  strcat(menu, candel ? "Trim|" : "#Trim|");
  strcat(menu, candel ? "Delete|": "#Delete|");
  choice = gfx_showmenu(menu);
  choice == 1 ? (
    clear();
  );
  choice == 2 ? (
    trim();
  );
  choice == 3 ? (
    delete();
  );
);

drawx = gfx_w - 10 - 60;
drawy = 58;
gfx_x = drawx; gfx_y = drawy;
set_color(0xcccccc);
gfx_drawstr(sprintf(#, "%02d:%02d:%03d", time_minutes(recsize),time_seconds(recsize), time_millis(recsize)));

sel_start != sel_end && !is_recording ? (
  drawx -= 150;
  gfx_x = drawx;
  set_color(COLOR_ACTIVE);
  gfx_drawstr(sprintf(#, "%02d:%02d:%03d", time_minutes(min(sel_start, sel_end)),time_seconds(min(sel_start, sel_end)), time_millis(min(sel_start, sel_end))));
  gfx_drawstr(" - ");
  gfx_drawstr(sprintf(#, "%02d:%02d:%03d", time_minutes(max(sel_start, sel_end)),time_seconds(max(sel_start, sel_end)), time_millis(max(sel_start, sel_end))));
);

function draw_wave()
local(i, j, ampl, ampr, pos, _max, _min, buf)
(
  loop(i=0; winw,
    pos = (i / winw * recsize / zoom + scrollx * recsize / zoom * (zoom - 1))|0;
    nextpos = ((i+1) / winw * recsize / zoom + scrollx * recsize / zoom * (zoom - 1))|0;
    // buffer downsample is marked dirty, downsample waveform
    !dsbuf[0] ? (
      _max = 0;
      _min = 0;
      loop(j=pos; max(1, nextpos-pos),
        ampl = recbuf[j*2];
        ampr = recbuf[j*2+1];
        _max = max(max(_max, ampl), ampr);
        _min = min(min(_min, ampl), ampr);
        j += 1;
      );
      _max > 1 ? _max = 1;
      _min < -1 ? _min = -1;
      dsbuf[1+i*2] = _min;
      dsbuf[1+i*2+1] = _max;
    );
    recsize ? (
      maxamp = max(max(maxamp,(dsbuf[1+i*2])), dsbuf[1+i*2+1]);
      gfx_line(winx+i, winy + winh/2, winx+i, winy+winh/2 + dsbuf[1+i*2] * winh / 2);
      gfx_line(winx+i, winy + winh/2, winx+i, winy+winh/2 + dsbuf[1+i*2+1] * winh / 2);
    ) : (
      // FIX bad display on empty waveform
      gfx_line(winx, winy+winh/2, winx+winw-1, winy+winh/2);
    );
    i += 1;
  );
  dsbuf[0] = 1;
);

function draw_grid ()
local (seconds, grids_second, grids, i, x)
(
  seconds = recsize / srate;
  grids_second = tempo / 60 / 4 * zoom;
  grids = seconds / grids_second;
  loop(i = 1; grids*zoom,
    x = winx + i * winw / grids - scrollx * winw * (zoom - 1);
    gfx_a = !(i % 4) ? 0.5 : 0.25;
    gfx_line(x, winy, x, winy+winh);
    i += 1;
  );
);

set_color(0x666666);
draw_grid();
gfx_a = 1;
set_color(is_recording ? 0xFF5555 : 0xcccccc);
gfx_rect(winx, winy, winw, winh, 0);
set_color(is_recording ? 0xFF5555 : 0xcccccc);
draw_wave();

function draw_scrollbar ()
local(x, scrollw)
(
  gfx_a = 0.3;
  gfx_rect(winx, winy+winh-15, winw, 15);
  gfx_a = 1;
  scrollw = winw/zoom;
  x = winx + winw * scrollx - scrollw * scrollx;
  gfx_rect(x, winy+winh-15, scrollw, 15);
  mouse.left_click && mouse_in_rect(x, winy+winh-15, scrollw, 15) ? (
    scroll_drag = 1;
  )
  : mouse.left_click && mouse_in_rect(winx, winy+winh-15, winw, 15) ? (
    scrollx = (mouse.x - winx - scrollw / 2) / (winw - scrollw);
    scrollx < 0 ? scrollx = 0;
    scrollx > 1 ? scrollx = 1;
    scroll_drag = 1;
  );
);

zoom > 1 && !is_recording && !lis_recording ? ( // lis_recording prevents glitch when finishing recording
  draw_scrollbar();
);

function draw_selection()
local(start, end)
(
  start = buf_to_screen(min(sel_start, sel_end));
  end = buf_to_screen(max(sel_start, sel_end));
  set_color(COLOR_ACTIVE);
  gfx_a = 0.35;
  gfx_rect(winx + start * winw, winy, (end-start)*winw, zoom > 1 ? winh - 15 : winh);
  gfx_a = 1;
);

sel_end > -1 && !is_recording ? (
  draw_selection();
);

function draw_seek()
local (pos)
(
  set_color(0xff5555);
  pos = playpos / recsize * zoom;
  pos -= scrollx * (zoom - 1);
  pos >= 0 && pos <= 1 ? (
    gfx_line(winx + winw * pos, winy, winx + winw * pos, winy+winh);
  );
);

is_playing  || is_paused ? (
  draw_seek();
);

// set selection
!noise_gate_drag && !scroll_drag && mouse.left && mouse.dx && mouse_in_rect(0,winy,winw+winx*2,zoom > 1 ? winh -15 : winh) ? (
  sel_end = screen_to_buf((mouse.x - winx) / winw);
  sel_end < 0 ? sel_end = 0;
  sel_start < 0 ? sel_start = 0;
  sel_end > recsize ? sel_end = recsize;
  sel_start > recsize ? sel_start = recsize;
);

// start selection
!scroll_drag && mouse.left_click && mouse_in_rect(winx,winy,winw,winh) ? (
  sel_start = screen_to_buf((mouse.x - winx) / winw);
  sel_end = sel_start;
);

mouse.wheel && mouse_in_rect(winx,winy,winw,winh) && !is_recording ? (
  //scrollx = (mouse.x - winx) / winw / zoom + scrollx / zoom * (zoom - 1);
  //scrollx = scrollx + (mouse.x - winx) / winw / zoom - scrollx / zoom;
  zoom == 1 ? (
    scrollx = (mouse.x - winx) / winw; // zoom does not work properly
  );
  zoom *= mouse.wheel > 0 ? 1.5 : 0.6666;
  zoom > 200 ? zoom = 200;
  zoom < 1 ? zoom = 1;
  zoom == 1 ? scrollx = 0;
);

scroll_drag && mouse.dx ? (
  scrollx += mouse.dx / (gfx_w - winw/zoom);
  scrollx < 0 ? scrollx = 0;
  scrollx > 1 ? scrollx = 1;
);

seconds = recsize / srate;
is_recording && seconds > 7 ? (
  zoom = seconds / 7 ;
  scrollx = 1;
);
// on finish recording reset scrollszoom
lis_recording && !is_recording ? (
  zoom = 1;
  scrollx = 0;
);
lis_recording = is_recording;

noise_gate_drag && mouse.dy ? (
  noisee += mouse.dy / 1000;
  noise_gate -= mouse.dy / 1000;
  noise_gate > 1 ? noise_gate = 1;
  noise_gate < 0.001 ? noise_gate = 0.001;
);

// draw noise gate
set_color(0x00FF00);
gfx_a = 0.15;
is_armed == 1 || is_armed == 2 ? (
  gfx_rect(winx, winy+winh/2-winh/2*noise_gate, winw, winh*noise_gate);
);

lzoom != zoom || lscrollx != scrollx || lrecsize != recsize
|| lgfx_w != gfx_w || lgfx_h != gfx_h ?
(
  dsbuf[0] = 0; // flag 0 causes downsample to recalculate
);
lgfx_w = gfx_w;
lgfx_h = gfx_h;
lzoom = zoom;
lscrollx = scrollx;
lrecsize = recsize;

!mouse.left ? (
  scroll_drag = 0;
  noise_gate_drag = 0;
);
