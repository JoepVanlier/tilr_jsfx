desc:TinyRec
noindex: true
about:
  # TinyRec

  Audio recording tool, stores up to 2 minutes at 44100 sample rate.

// maxmem = 120seconds * 44100srate * 2chn + 1000prebuf
options: maxmem=10585000

import tr.gfxlib.jsfx-inc

@init

ext_noinit = 1;

prebuf = 0;
prepos = 0;
premax = 1000;

recbuf = 1000;
recpos = 0;
recmax = min(44100 * 120, __memtop() / 2);
recsize = 0;
playpos = 0;
play_loop = 1;

is_recording = 0;
is_playing = 0;
is_armed = 0;

zoom = 1;
scrollx = 0;
sel_start = 0;
sel_end = 0;

function record (append) (
  !append ? (
    recpos = 0;
    recsize = 0;
  );
  is_recording = 1;
  is_playing = 0;
  is_paused = 0;
  zoom = 1;
);

function play () (
  is_recording = 0;
  is_playing = 1;
  is_paused = 0;
  !playpos && sel_start != sel_end ? (
    playpos = min(sel_start, sel_end);
  );
);

function pause () (
  is_playing = 0;
  is_paused = 1;
);

function stop () (
  is_recording = 0;
  is_playing = 0;
  playpos = 0;
  is_paused = 0;
);

@sample

recpos > recmax ? (
  is_recording = 0;
);

is_recording ? (
  recbuf[recpos*2] = spl0;
  recbuf[recpos*2+1] = spl1;
  recpos += 1;
  recpos > recsize ? (
    recsize = recpos;
  );
);

is_playing ? (
  spl0 += recbuf[playpos*2];
  spl1 += recbuf[playpos*2+1];
  playpos += 1;
  sel_start != sel_end ? (
    playpos > max(sel_start, sel_end) ? (
      playpos = min(sel_start, sel_end);
      !play_loop ? stop();
    );
  ) : ( 
    playpos > recsize ? (
      playpos = 0;
      !play_loop ? stop();
    );
  );
);

@gfx 400 300

winx = 10;
winy = 55;
winw = gfx_w - 20;
winh = gfx_h - winy - 10;
gfx_clear = COLOR_BG;
mouse.update_mouse_state();
gfx_setfont(1, "Arial", 16, 'b');

drawx = 10;
drawy = 10;
set_color(play_loop ? 0x00FFFF : 0xFFFFFF);
gfx_roundrect(drawx,drawy, 35, 35, 5);
mouse.left_click && mouse_in_rect(drawx, drawy, 35, 35) ? (
  play_loop = !play_loop;
);
gfx_x = drawx;
gfx_y = drawy;
gfx_drawstr("L", 5, drawx+35, drawy+35);
set_color(0xFFFFFF);

drawx += 45;
// draw playbutton
set_color(is_playing ? 0x00FF00 : 0xFFFFFF);
gfx_roundrect(drawx,drawy, 35, 35, 5);
is_playing ? (
  gfx_rect(drawx+10, drawy+13, 5, 10);
  gfx_rect(drawx+21, drawy+13, 5, 10);
) : (
  gfx_triangle(drawx+10, drawy+7, drawx+10, drawy+12+15, drawx+12+15, drawy+12+5);
);
mouse.left_click && mouse_in_rect(drawx,drawy,35,35) ? (
  is_playing ? (
    pause();
  ) : (
    play();
  );
);

drawx += 45;
// draw stop button
set_color(0xFFFFFF);
gfx_roundrect(drawx, drawy, 35,35, 5);
gfx_rect(drawx+10,drawy+10,15, 15,1);
mouse.left_click && mouse_in_rect(drawx, drawy, 35, 35) ? (
  stop();
);

// draw rec button
drawx += 60;
set_color(is_recording ? 0xFF0000 : 0xFFFFFF);
gfx_circle(drawx,drawy+35/2,35/2,0);
gfx_circle(drawx,drawy+35/2,35/4,1);
mouse.left_click && mouse_in_rect(drawx-35/2, drawy, 35, 35) ? (
  is_recording ? (
    is_recording = 0;
  ) : (
    record(0);
  );
);

// RIGHT BUTTONS

function export_wave() 
local(start, end)
(
  track = get_host_placement();
  track < 0 ? track = 0;
  sel_start != sel_end ? (
    start = (min(sel_start,sel_end)|0);
    end = (max(sel_start,sel_end)|0) - start;
    export_buffer_to_project(recbuf + start * 2, end, 2, srate, track);
  ) : (
    export_buffer_to_project(recbuf, recsize, 2, srate, track);
  );
);

drawx = gfx_w;
drawx -= 70;
drawy = 20;
draw_button(drawx, drawy, 60, "Export", 0);
mouse.left_click && mouse_in_rect(drawx, drawy, 60, 20) ? (
  export_wave();
);


function draw_wave()
local(i, j, amp, pos, _max, _min)
(
  loop(i=0; winw,
    pos = (i / winw * recsize / zoom + scrollx * recsize / zoom * (zoom - 1))|0;
    nextpos = ((i+1) / winw * recsize / zoom + scrollx * recsize / zoom * (zoom - 1))|0;
    _max = 0;
    _min = 0;
    loop(j=pos; max(1, nextpos-pos),
      amp = (recbuf[j*2] + recbuf[j*2 +1]) * 0.5 * (winh-winy) * 0.5;
      _max = max(_max, amp);
      _min = min(_min, amp);
      j += 1;
    );
    _max > 1 ? max = 1;
    _min < -1 ? min = -1;
    gfx_line(winx+i, winy + winh/2, winx+i, winy+winh/2+_min);
    gfx_line(winx+i, winy + winh/2, winx+i, winy+winh/2+_max);
    i += 1;
  );
);

// -------

function draw_grid () 
local (seconds, grids_second, grids, i, x)
(
  seconds = recsize / srate;
  grids_second = tempo / 60 / 4 * zoom;
  grids = seconds / grids_second;
  loop(i = 1; grids*zoom, 
    x = winx + i * winw / grids - scrollx * winw * (zoom - 1);
    gfx_a = !(i % 4) ? 0.5 : 0.25;
    gfx_line(x, winy, x, winy+winh);
    i += 1;
  );
);

set_color(0x666666);
draw_grid();
gfx_a = 1;
set_color(is_recording ? 0xFF0000 : 0x666666);
gfx_rect(winx, winy, winw, winh, 0);
set_color(is_recording ? 0xFF0000 : 0xFFFFFFF);
draw_wave();


function draw_scrollbar ()
local(x, scrollw)
(
  gfx_a = 0.3;
  gfx_rect(winx, winy+winh-15, winw, 15);
  gfx_a = 1;
  scrollw = winw/zoom;
  x = winx + winw * scrollx - scrollw * scrollx;
  gfx_rect(x, winy+winh-15, scrollw, 15);
  mouse.left_click && mouse_in_rect(x, winy+winh-15, scrollw, 15) ? (
    scroll_drag = 1;
  );
);

zoom > 1 ? (
  draw_scrollbar();
);

function draw_seek()
local (pos)
(
  set_color(0xFF0000);
  pos = playpos / recsize * zoom;
  pos -= scrollx * (zoom - 1);
  pos >= 0 && pos <= 1 ? (
    gfx_line(winx + winw * pos, winy, winx + winw * pos, winy+winh);
  );
);

is_playing  || is_paused ? (
  draw_seek();
);


function screen_to_buf (x) (
  x * recsize / zoom + scrollx * recsize / zoom * (zoom - 1);
);

function buf_to_screen (x) (
  x / recsize * zoom - scrollx * (zoom-1);
);

function draw_selection()
local(start, end)
(
  start = buf_to_screen(min(sel_start, sel_end));
  end = buf_to_screen(max(sel_start, sel_end));
  gfx_set(1,0,0,0.25);
  gfx_rect(winx + start * winw, winy, (end-start)*winw, zoom > 1 ? winh - 15 : winh);
);

sel_end > -1 ? (
  draw_selection();
);

!scroll_drag && mouse.left && mouse.dx && mouse_in_rect(0,winy,winw+winx*2,winh) ? (
  sel_end = screen_to_buf((mouse.x - winx) / winw);
  sel_end < 0 ? sel_end = 0;
  sel_start < 0 ? sel_start = 0;
  sel_end > recsize ? sel_end = recsize;
  sel_start > recsize ? sel_start = recsize;
);

!scroll_drag && mouse.left_click && mouse_in_rect(winx,winy,winw,winh) ? (
  sel_start = screen_to_buf((mouse.x - winx) / winw);
  sel_end = sel_start;
);

mouse.wheel && mouse_in_rect(winx,winy,winw,winh) && !is_recording ? (
  zoom == 1 ? (
    scrollx = (mouse.x - winx) / winw; // zoom on cursor does not work properly
  );
  zoom += mouse.wheel;
  zoom > 30 ? zoom = 30;
  zoom < 1 ? zoom = 1;
);

scroll_drag && mouse.dx ? (
  scrollx += mouse.dx / (gfx_w - winw/zoom);
  scrollx < 0 ? scrollx = 0;
  scrollx > 1 ? scrollx = 1;
);

seconds = recsize / srate;
is_recording && seconds > 7 ? (
  zoom = seconds / 7 ;
  scrollx = 1;
);
lis_recording && !is_recording ? (
  count += 1;
  zoom = 1;
  scrollx = 0;
);
lis_recording = is_recording;

!mouse.left ? (
  scroll_drag = 0;
);
